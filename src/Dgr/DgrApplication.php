<?php
/**
 * @author Dmitry Groza <boxfrommars@gmail.com>
 */

namespace Dgr;


use Doctrine\Common\Cache\FilesystemCache;
use Monolog\Logger;
use Silex\Application;
use Silex\Provider\DoctrineServiceProvider;
use Silex\Provider\MonologServiceProvider;
use Silex\Provider\TwigServiceProvider;

class DgrApplication extends Application {

    public function __construct($values = array())
    {
        parent::__construct($values);

        $this['dgr.config'] = $values;
        $this->register(new MonologServiceProvider(), array(
            'monolog.logfile' => $this['tmp_path'] . '/dgr.log',
            'monolog.level' => $this['debug'] ? Logger::DEBUG : Logger::INFO,
        ));

        $this['cache'] = $this->share(function () {
            return new FilesystemCache($this['tmp_path'] . '/cache');
        });

        $this['logtime'] = $this->protect(
            function ($msg = null, $params = array()) {
                $this['monolog']->addDebug(
                    (int)((microtime(true) - $this['starttime']) * 1000) . 'ms ' . ($msg ? "[$msg]" : ''),
                    $params
                );
            }
        );

        $this->register(new TwigServiceProvider(), array(
            'twig.path' => $this['application_path'] . '/views',
            'twig.options' => array(
                'cache' => $this['tmp_path'] . '/cache/twig',
                'debug' => $this['debug'],
            ),
        ));

        $this->register(new DoctrineServiceProvider(), $this['config']['db']);

        $this->before(
            function () {
                $this['logtime']('before controller');
            }
        );

        $this->after(
            function () {
                $this['logtime']('after controller');
            }
        );
    }

    /**
     * @param \Closure|object $callable
     * @return callable
     */
    public static function share($callable)
    {
        return parent::share($callable); // TODO: Change the autogenerated stub
    }

    /**
     * @param \Closure|object $callable
     * @return callable
     */
    public static function protect($callable)
    {
        return parent::protect($callable); // TODO: Change the autogenerated stub
    }
}